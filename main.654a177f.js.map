{"version":3,"sources":["scripts/main.js"],"names":["sortList","list","count","i","children","length","prev","current","Number","getAttribute","split","join","slice","insertBefore","getEmployees","employees","node","push","name","innerText","position","salary","age","document","querySelector"],"mappings":";AAAA,aAsCA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EApCA,SAASA,EAASC,GACZC,IAAAA,EAED,EAAA,CACDA,EAAQ,EAEH,IAAA,IAAIC,EAAI,EAAGA,EAAIF,EAAKG,SAASC,OAAQF,IAAK,CACvCG,IAAAA,EAAOL,EAAKG,SAASD,EAAI,GACzBI,EAAUN,EAAKG,SAASD,GAE1BK,OAAOF,EAAKG,aAAa,eAAeC,MAAM,KAAKC,KAAK,IACzDC,MAAM,IAAMJ,OAAOD,EAAQE,aAAa,eAAeC,MAAM,KAC7DC,KAAK,IAAIC,MAAM,IAAM,IACtBV,IACAD,EAAKY,aAAaZ,EAAKG,SAASD,GAAIF,EAAKG,SAASD,EAAI,YAGnDD,EAAQ,GAGnB,SAASY,EAAab,GACdc,IADoB,EACpBA,EAAY,GAECd,EAAAA,EAAAA,EAAKG,UAHE,IAGQ,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAvBY,IAAAA,EAAuB,EAAA,MAChCD,EAAUE,KAAK,CACbC,KAAMF,EAAKG,UACXC,SAAUJ,EAAKP,aAAa,iBAC5BY,OAAQL,EAAKP,aAAa,eAC1Ba,IAAKN,EAAKP,aAAa,eARD,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAYnBM,OAAAA,EAGTf,EAASuB,SAASC,cAAc,OAChCV,EAAaS,SAASC,cAAc","file":"main.654a177f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nfunction sortList(list) {\r\n  let count;\r\n\r\n  do {\r\n    count = 0;\r\n\r\n    for (let i = 1; i < list.children.length; i++) {\r\n      const prev = list.children[i - 1];\r\n      const current = list.children[i];\r\n\r\n      if (Number(prev.getAttribute('data-salary').split(',').join('')\r\n        .slice(1)) - Number(current.getAttribute('data-salary').split(',')\r\n        .join('').slice(1)) < 0) {\r\n        count++;\r\n        list.insertBefore(list.children[i], list.children[i - 1]);\r\n      }\r\n    }\r\n  } while (count > 0);\r\n}\r\n\r\nfunction getEmployees(list) {\r\n  const employees = [];\r\n\r\n  for (const node of list.children) {\r\n    employees.push({\r\n      name: node.innerText,\r\n      position: node.getAttribute('data-position'),\r\n      salary: node.getAttribute('data-salary'),\r\n      age: node.getAttribute('data-age'),\r\n    });\r\n  }\r\n\r\n  return employees;\r\n}\r\n\r\nsortList(document.querySelector('ul'));\r\ngetEmployees(document.querySelector('ul'));\r\n"]}